{
  "createdAt": "2025-08-07T07:13:24.569Z",
  "updatedAt": "2025-10-13T10:29:34.000Z",
  "id": "GdC8MtR5d9Lm9R62",
  "name": "Cron Job To update Audit Status (Depreciated-Shifted to Cron job Supabase)",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "url": "={{$vars.SupabaseDBUrl}}/task_groups",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "=audit_id",
              "value": "=eq.{{$('Split Out').item.json.id}}"
            },
            {
              "name": "select",
              "value": "=id,audit_id,task_name,status"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$vars.Supabase_API_Key}}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{$vars.Supabase_Service_Role}}"
            }
          ]
        },
        "options": {}
      },
      "id": "8563f5dc-3b49-42da-99eb-67854e4112c0",
      "name": "Get Task Groups",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        448,
        32
      ]
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{$vars.SupabaseDBUrl}}/audits",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "=id",
              "value": "=eq.{{$('Decide Audit Status').item.json.audit_id}}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$vars.Supabase_API_Key}}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{$vars.Supabase_Service_Role}}"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=status",
              "value": "={{ $('Decide Audit Status').item.json.status }}"
            },
            {
              "name": "completed_at",
              "value": "={{ $('Decide Audit Status').item.json.completed_at || null}}"
            }
          ]
        },
        "options": {}
      },
      "id": "6522bcbf-6b74-4daf-a53c-7301ce87e6b9",
      "name": "Update Audit",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        896,
        128
      ]
    },
    {
      "parameters": {
        "functionCode": "// Group tasks by audit_id\nconst grouped = {};\nfor (const item of items) {\n  const t = item.json;\n  if (!grouped[t.audit_id]) grouped[t.audit_id] = [];\n  grouped[t.audit_id].push(t);\n}\n\nconst results = [];\n\nfor (const [audit_id, tasks] of Object.entries(grouped)) {\n  const statuses = tasks.map(t => t.status);\n\n  let hasPending = false;\n  let hasInProgress = false;\n  let hasFailed = false;\n  let allCompleted = true;\n  let allFailed = true;\n  let allPending = true;\n  let allFinished = true; // completed or failed only\n\n  for (const s of statuses) {\n    if (s === 'pending') hasPending = true;\n    if (s === 'in_progress') hasInProgress = true;\n    if (s === 'failed') hasFailed = true;\n\n    if (s !== 'completed') allCompleted = false;\n    if (s !== 'failed') allFailed = false;\n    if (s !== 'pending') allPending = false;\n    if (!(s === 'completed' || s === 'failed')) allFinished = false;\n  }\n\n  let status;\n  let completed_at = null;\n\n  if (allCompleted) {\n    status = 'completed';\n    completed_at = new Date().toISOString();\n  } else if (allFailed) {\n    status = 'failed';\n    completed_at = new Date().toISOString();\n  } else if (hasFailed && allFinished) {\n    status = 'partially_completed';\n    completed_at = new Date().toISOString();\n  } else if (allPending) {\n    status = 'pending';\n  } else if (hasPending || hasInProgress) {\n    status = 'in_progress';\n  } else {\n    status = 'unknown';\n  }\n\n  results.push({\n    json: {\n      audit_id,\n      status,\n      completed_at\n    }\n  });\n}\n\nreturn results;\n"
      },
      "id": "ace9143b-9f61-47aa-bd1e-b5dff65131fe",
      "name": "Decide Audit Status",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        672,
        128
      ]
    },
    {
      "parameters": {
        "content": "## 🛠 Auto-Audit Status Updater (Every 15 Mins)\nThis workflow runs every 5 minutes to evaluate and update the status of all audits currently marked as in_progress. For each audit:\n\n    It fetches associated task_groups.\n\n    Calculates the overall audit status using task group states:\n\n        completed: all tasks completed\n\n        partially_completed: mix of completed and failed\n\n        in_progress: contains any pending or in_progress tasks\n\n        failed is never set explicitly\n\n    Updates the audit record in Supabase accordingly.",
        "height": 420,
        "width": 500,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -784,
        -240
      ],
      "typeVersion": 1,
      "id": "ff658790-a5e9-4a94-86c4-96fd4a981175",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "url": "={{$vars.SupabaseDBUrl}}/audits",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "=status",
              "value": "=eq.in_progress"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$vars.Supabase_API_Key}}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{$vars.Supabase_Service_Role}}"
            }
          ]
        },
        "options": {}
      },
      "id": "9402ef26-c141-42ca-a895-ae6b358d3b19",
      "name": "Get In_Progress Audits",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        0,
        32
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 15
            }
          ]
        }
      },
      "id": "8c688da1-285e-4d49-8821-5c321ac91589",
      "name": "Run Every 15 Mins",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        -224,
        32
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "id",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        224,
        32
      ],
      "id": "8b145097-a844-4791-a859-f44fca152d6d",
      "name": "Split Out"
    },
    {
      "parameters": {
        "jsCode": "const groupedTasks = new Map();\nconst tasksToUpdate = [];\n\n// Group tasks by audit_id\nfor (const item of $input.all()) {\n  const task = item.json;\n  const auditId = task.audit_id;\n\n  if (!groupedTasks.has(auditId)) {\n    groupedTasks.set(auditId, []);\n  }\n  groupedTasks.get(auditId).push(task);\n}\n\n// Iterate through each group to apply the logic\nfor (const [auditId, tasks] of groupedTasks.entries()) {\n  const outboundTask = tasks.find(t => t.task_name === $vars.OutboundAnalysisDbKEY);\n  const inboundTask = tasks.find(t => t.task_name === $vars.InboundAnalysisDbKEY);\n\n  // Check if Outbound_Call_Analysis is 'failed' and Inbound_Call_Analysis is not 'failed'\n  if (outboundTask && inboundTask && outboundTask.status === 'failed' && inboundTask.status !== 'failed') {\n    // If the condition is met, prepare the inbound task for an update\n    tasksToUpdate.push({\n      json: {\n        id: inboundTask.id,\n        status: 'failed',\n        audit_id: inboundTask.audit_id,\n        task_name: inboundTask.task_name\n      }\n    });\n  }\n}\n\nreturn tasksToUpdate;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        -64
      ],
      "id": "c1fafb14-3657-41b9-b29a-f2c2f1ed01ff",
      "name": "Check if Outbound Failed then Fail the Inbound"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{$vars.SupabaseDBUrl}}/task_groups",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "=eq.{{ $('Check if Outbound Failed then Fail the Inbound').item.json.id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$vars.Supabase_API_Key}}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{$vars.Supabase_Service_Role}}"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "status",
              "value": "failed"
            },
            {
              "name": "error_message",
              "value": "Outbound Call for this Audit failed"
            }
          ]
        },
        "options": {}
      },
      "id": "0cf1a1fb-6908-41de-b8be-c75ada40b2fc",
      "name": "Mark Inbound as Failed only if its Outbound Failed",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        896,
        -64
      ]
    },
    {
      "parameters": {
        "url": "={{$vars.SupabaseDBUrl}}/calls",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "task_group_id",
              "value": "=eq.{{ $('Switch').item.json.id }}"
            },
            {
              "name": "select",
              "value": "=direction,call_initiate_time,call_accepted_time,call_duration,interruptions,termination_reason"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$vars.Supabase_API_Key}}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        560,
        656
      ],
      "id": "a5e24cb9-6432-44e0-9369-ef0ebe8b3a9e",
      "name": "Get InboundCall Details"
    },
    {
      "parameters": {
        "url": "={{$vars.SupabaseDBUrl}}/calls",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "task_group_id",
              "value": "=eq.{{ $('Switch').item.json.id }}"
            },
            {
              "name": "select",
              "value": "=direction,call_initiate_time,call_accepted_time,call_duration,interruptions,termination_reason"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$vars.Supabase_API_Key}}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        560,
        848
      ],
      "id": "d37ce60a-8784-425b-bbe7-e7a2ea9a7cec",
      "name": "Get OutboundCall Details"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a97e116-ff02-4500-8d16-bf0fad5995d4",
              "leftValue": "={{ $('Switch').item.json.status }}",
              "rightValue": "failed",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        336,
        848
      ],
      "id": "55b9332c-e7a3-4a01-a6a3-613994ffe2d4",
      "name": "If not failed1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a97e116-ff02-4500-8d16-bf0fad5995d4",
              "leftValue": "={{ $('Switch').item.json.status }}",
              "rightValue": "failed",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        336,
        656
      ],
      "id": "777666a4-9d94-4582-a501-f96cd859212e",
      "name": "If not failed"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Get Updated Task Groups').item.json.task_name }}",
                    "rightValue": "={{ $vars.InboundAnalysisDbKEY }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "4eb25306-f7ec-4790-8334-b676b29c4ef0"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "=Inbound_Call_Analysis"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bbb27ae3-9ae4-4f68-8bdd-4d7bc24cf367",
                    "leftValue": "={{ $('Get Updated Task Groups').item.json.task_name }}",
                    "rightValue": "={{ $vars.OutboundAnalysisDbKEY }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Outbound_Call_Analysis"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        112,
        752
      ],
      "id": "b188bfb0-b3a9-4346-b7e2-3f5c31d41b31",
      "name": "Switch"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -560,
        752
      ],
      "id": "09244385-e4bd-47d9-8048-a3d2f6d1f75e",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "url": "={{$vars.SupabaseDBUrl}}/audits",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "eq.4620f35c-5e19-4335-8c55-9d820e9d46ea"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$vars.Supabase_API_Key}}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{$vars.Supabase_Service_Role}}"
            }
          ]
        },
        "options": {}
      },
      "id": "300af7d1-b22e-4e9b-a8b6-4c411b210677",
      "name": "Get Completed Audit",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -336,
        752
      ]
    },
    {
      "parameters": {
        "url": "={{$vars.SupabaseDBUrl}}/task_groups",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "=audit_id",
              "value": "=eq.{{ $('Get Completed Audit').item.json.id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$vars.Supabase_API_Key}}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{$vars.Supabase_Service_Role}}"
            }
          ]
        },
        "options": {}
      },
      "id": "b0856238-0a82-4664-846c-0cfd958a3f69",
      "name": "Get Updated Task Groups",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -112,
        752
      ]
    },
    {
      "parameters": {
        "url": "={{$vars.SupabaseDBUrl}}/call_report_evaluations",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "report_id",
              "value": "=eq.{{ $('Get InboundCall Report done During this Audit').item.json.id }}"
            },
            {
              "name": "select",
              "value": "*"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$vars.Supabase_API_Key}}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1008,
        656
      ],
      "id": "837f36c3-2d84-4ab2-83e4-6ac11ed44964",
      "name": "Get InboundCall Questionaire done During this Audit"
    },
    {
      "parameters": {
        "url": "={{$vars.SupabaseDBUrl}}/generated_call_reports",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "task_group_id",
              "value": "=eq.{{ $('Switch').item.json.id }}"
            },
            {
              "name": "select",
              "value": "*"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$vars.Supabase_API_Key}}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        784,
        656
      ],
      "id": "7a19482d-ae54-4a09-93c8-b36905e66715",
      "name": "Get InboundCall Report done During this Audit"
    },
    {
      "parameters": {
        "jsCode": "// Define keys to strip\nconst stripReportKeys = [\"id\", \"business_id\", \"audit_id\", \"task_group_id\", \"created_at\"];\nconst stripQuestionaireKeys = [\"id\", \"report_id\"];\n\n// Access report from specific node\nconst reportRaw = $('Get InboundCall Report done During this Audit').first().json;\n\n// Access questionaire list correctly from all items\nconst questionaireItems = $('Get InboundCall Questionaire done During this Audit').all().map(i => i.json);\n\n// Guard clauses\nif (!reportRaw) {\n  throw new Error(\"❌ Report node returned no data.\");\n}\nif (!Array.isArray(questionaireItems)) {\n  throw new Error(\"❌ Questionaire node did not return an array.\");\n}\n\n// Strip report keys\nconst report = Object.fromEntries(\n  Object.entries(reportRaw).filter(([key]) => !stripReportKeys.includes(key))\n);\n\n// Clean each questionaire item\nconst cleanedQuestionaire = questionaireItems.map(q =>\n  Object.fromEntries(Object.entries(q).filter(([key]) => !stripQuestionaireKeys.includes(key)))\n);\n\n// Merge into final output\nreport.questionaire = cleanedQuestionaire;\n\nreturn [{ json: report }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        656
      ],
      "id": "194ad17d-9afd-4909-b257-6aa90c48145f",
      "name": "Combine1",
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "// Define keys to strip\nconst stripReportKeys = [\"id\", \"business_id\", \"audit_id\", \"task_group_id\", \"created_at\"];\nconst stripQuestionaireKeys = [\"id\", \"report_id\"];\n\n// Access report from specific node\nconst reportRaw = $('Get OutboundCall Report done During this Audit').first().json;\n\n// Access questionaire list correctly from all items\nconst questionaireItems = $('Get OutboundCall Questionaire done During this Audit').all().map(i => i.json);\n\n// Guard clauses\nif (!reportRaw) {\n  throw new Error(\"❌ Report node returned no data.\");\n}\nif (!Array.isArray(questionaireItems)) {\n  throw new Error(\"❌ Questionaire node did not return an array.\");\n}\n\n// Strip report keys\nconst report = Object.fromEntries(\n  Object.entries(reportRaw).filter(([key]) => !stripReportKeys.includes(key))\n);\n\n// Clean each questionaire item\nconst cleanedQuestionaire = questionaireItems.map(q =>\n  Object.fromEntries(Object.entries(q).filter(([key]) => !stripQuestionaireKeys.includes(key)))\n);\n\n// Merge into final output\nreport.questionaire = cleanedQuestionaire;\n\nreturn [{ json: report }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        848
      ],
      "id": "bc09e69c-1424-4125-a24f-cc711e7d4f5a",
      "name": "Combine",
      "executeOnce": true
    },
    {
      "parameters": {
        "url": "={{$vars.SupabaseDBUrl}}/call_report_evaluations",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "report_id",
              "value": "=eq.{{ $('Get OutboundCall Report done During this Audit').item.json.id }}"
            },
            {
              "name": "select",
              "value": "*"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$vars.Supabase_API_Key}}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1008,
        848
      ],
      "id": "60d450bd-d1eb-4a04-9804-52587980beca",
      "name": "Get OutboundCall Questionaire done During this Audit"
    },
    {
      "parameters": {
        "url": "={{$vars.SupabaseDBUrl}}/generated_call_reports",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "task_group_id",
              "value": "=eq.{{ $('Switch').item.json.id }}"
            },
            {
              "name": "select",
              "value": "*"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$vars.Supabase_API_Key}}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        784,
        848
      ],
      "id": "dd2f20ff-bcfa-41c9-a5c9-e5a79b6afd35",
      "name": "Get OutboundCall Report done During this Audit"
    }
  ],
  "connections": {
    "Get Task Groups": {
      "main": [
        [
          {
            "node": "Decide Audit Status",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check if Outbound Failed then Fail the Inbound",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decide Audit Status": {
      "main": [
        [
          {
            "node": "Update Audit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get In_Progress Audits": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run Every 15 Mins": {
      "main": [
        [
          {
            "node": "Get In_Progress Audits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Get Task Groups",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Outbound Failed then Fail the Inbound": {
      "main": [
        [
          {
            "node": "Mark Inbound as Failed only if its Outbound Failed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark Inbound as Failed only if its Outbound Failed": {
      "main": [
        []
      ]
    },
    "Update Audit": {
      "main": [
        []
      ]
    },
    "If not failed1": {
      "main": [
        [
          {
            "node": "Get OutboundCall Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If not failed": {
      "main": [
        [
          {
            "node": "Get InboundCall Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "If not failed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If not failed1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get Completed Audit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Completed Audit": {
      "main": [
        [
          {
            "node": "Get Updated Task Groups",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Updated Task Groups": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get InboundCall Details": {
      "main": [
        [
          {
            "node": "Get InboundCall Report done During this Audit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get InboundCall Report done During this Audit": {
      "main": [
        [
          {
            "node": "Get InboundCall Questionaire done During this Audit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get InboundCall Questionaire done During this Audit": {
      "main": [
        [
          {
            "node": "Combine1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get OutboundCall Details": {
      "main": [
        [
          {
            "node": "Get OutboundCall Report done During this Audit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get OutboundCall Questionaire done During this Audit": {
      "main": [
        [
          {
            "node": "Combine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get OutboundCall Report done During this Audit": {
      "main": [
        [
          {
            "node": "Get OutboundCall Questionaire done During this Audit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Run Every 5 Mins": {
      "recurrenceRules": []
    },
    "node:Run Every 15 Mins": {
      "recurrenceRules": []
    }
  },
  "meta": null,
  "pinData": {},
  "versionId": "6301912f-b655-4018-9710-d013e9ec321c",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-07T07:13:24.577Z",
      "updatedAt": "2025-08-07T07:13:24.577Z",
      "role": "workflow:owner",
      "workflowId": "GdC8MtR5d9Lm9R62",
      "projectId": "LuK1n39yspgZn4ID",
      "project": {
        "createdAt": "2025-06-03T10:24:12.778Z",
        "updatedAt": "2025-06-03T11:30:21.622Z",
        "id": "LuK1n39yspgZn4ID",
        "name": "Fuzail Sohail <fuzailsohail40@gmail.com>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-06-03T10:24:12.781Z",
            "updatedAt": "2025-06-03T10:24:12.781Z",
            "userId": "9ba5b413-59b6-4d30-ad4b-75763cd3a374",
            "projectId": "LuK1n39yspgZn4ID",
            "user": {
              "createdAt": "2025-06-03T10:24:12.776Z",
              "updatedAt": "2025-10-16T07:00:00.000Z",
              "id": "9ba5b413-59b6-4d30-ad4b-75763cd3a374",
              "email": "fuzailsohail40@gmail.com",
              "firstName": "Fuzail",
              "lastName": "Sohail",
              "personalizationAnswers": null,
              "settings": {
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "CcHBrELrSsWhXNYT",
                "userActivated": true,
                "userActivatedAt": 1750330808510,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1753277941726
                }
              },
              "disabled": false,
              "mfaEnabled": true,
              "lastActiveAt": "2025-10-16",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": [
    {
      "createdAt": "2025-08-14T20:27:52.072Z",
      "updatedAt": "2025-08-14T20:27:52.072Z",
      "id": "CbQQ2nfApBR0i0Ru",
      "name": "TopRatedCoachAI"
    }
  ]
}