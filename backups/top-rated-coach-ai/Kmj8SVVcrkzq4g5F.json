{
  "createdAt": "2025-10-26T06:14:34.143Z",
  "updatedAt": "2025-10-26T06:17:02.000Z",
  "id": "Kmj8SVVcrkzq4g5F",
  "name": "Centralized n8n Error Management System with Automated Email Alerts via Gmail",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {},
      "id": "7b9a99ba-2e76-4210-a2e5-cb5c9fd707a7",
      "name": "Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "position": [
        1232,
        912
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Send Error Handling Email",
        "height": 549,
        "width": 783
      },
      "id": "301a2f94-187c-4183-a0fc-5ec30480202a",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1856,
        688
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "id": "f624fcc6-ea87-425c-b20c-b8c14d7f1226",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        1232,
        400
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "## Update Default Error Handler For All N8n Workflows",
        "height": 260,
        "width": 1195
      },
      "id": "dedfb0a6-a297-42c3-8a68-6aded7203373",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1440,
        320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "get",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $workflow.id }}"
        },
        "requestOptions": {}
      },
      "id": "2de34694-ccc8-451d-9bd7-9b438d5d045b",
      "name": "N8n Get Error Handler",
      "type": "n8n-nodes-base.n8n",
      "position": [
        1536,
        400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "c5ac588c-3972-4b32-9d40-dbb5a73cb170",
      "name": "N8n Get All Workflows",
      "type": "n8n-nodes-base.n8n",
      "position": [
        1760,
        400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "290fd302-4e2d-44d6-8a8a-14a0b8f2c360",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.settings.errorWorkflow }}",
              "rightValue": "=Default Error Handler"
            },
            {
              "id": "2a5799e9-2030-4281-bf11-e7f9777906c5",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              },
              "leftValue": "={{ $json.id }}",
              "rightValue": "={{ $('N8n Get Error Handler').first().json.id }}"
            },
            {
              "id": "6059514d-9bef-4d21-a52e-eb967aea84f7",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ $json.active }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "ad17b29e-18c9-4ac9-8b87-67c79ca2b0a4",
      "name": "If No Default Error Handler Set",
      "type": "n8n-nodes-base.if",
      "position": [
        1968,
        400
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "update",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $json.id }}"
        },
        "workflowObject": "={{ JSON.stringify($json) }}",
        "requestOptions": {}
      },
      "id": "19439590-b2a7-4884-9280-16955e1cf895",
      "name": "N8n Update Workflow",
      "type": "n8n-nodes-base.n8n",
      "position": [
        2416,
        384
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = $json\n\ndata.settings.errorWorkflow = $('N8n Get Error Handler').item.json.id ;\ndelete data.settings.callerPolicy;\n\nreturn {\n  id: data.id,\n  name: data.name,\n  nodes: data.nodes,\n  connections: data.connections,\n  settings: data.settings\n}"
      },
      "id": "4c1bb8fe-8029-4cf1-9b96-c17d54145340",
      "name": "Set Data",
      "type": "n8n-nodes-base.code",
      "position": [
        2192,
        384
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "## Settings",
        "height": 260,
        "width": 300
      },
      "id": "4d8b7522-62ae-4738-9c48-285363399b0a",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1440,
        832
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "53ac5417-db98-41e5-bc6d-acb6dd1fec42",
              "name": "N8n Url",
              "type": "string",
              "value": "={{ $('Error Trigger').first().json.execution.url.split('executions')[0] }}"
            },
            {
              "id": "0f85c65a-80bb-4977-90b9-1b4e741b5f70",
              "name": "Email Receiver",
              "type": "string",
              "value": "your-email-here@gmail.com"
            },
            {
              "id": "138c091f-7cd4-453a-9c75-5d193b617a39",
              "name": "Email Sender Name",
              "type": "string",
              "value": "Error Handling System"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {
          "dotNotation": true
        }
      },
      "id": "a6a452ec-5320-46b3-be99-cf6b3f562de2",
      "name": "Settings",
      "type": "n8n-nodes-base.set",
      "position": [
        1536,
        912
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "a757d78d-799b-401b-8c01-3103fddfe757",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              },
              "leftValue": "={{ Boolean($('Settings').first().json.execution) }}",
              "rightValue": "={{ true }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a357bfaf-66d4-4b35-b4e8-8e4dbc255a68",
      "name": "If Execution Error",
      "type": "n8n-nodes-base.if",
      "position": [
        1968,
        912
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "html": "<h2>Execution Details</h2>\n<p>Please see execution details at <a href=\"{{ $('Settings').first().json.execution.url }}\">workflow execution url</a></p>\n<h3>DateTime</h3>\n<p>{{ DateTime.fromMillis($json.execution.error.timestamp) }}</p>\n<h3>Last Node Executed</h3>\n<p>{{ $json.execution.lastNodeExecuted }}</p>\n<h3>Mode</h3>\n<p>{{ $json.execution.mode }}</p>\n<h3>Message</h3>\n<p>{{ $json.execution.error.message }}</p>\n<h3>Stack trace</h3>\n<pre>\n{{ $json.execution.error.stack }}\n</pre>"
      },
      "id": "f72827ca-6775-45d1-923b-0ced413a7b25",
      "name": "HTML For Execution Error",
      "type": "n8n-nodes-base.html",
      "position": [
        2192,
        784
      ],
      "typeVersion": 1.2,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "html": "<h2>Trigger Failure Details</h2>\n<p>A trigger on main workflow has thrown an error.</p>\n<h3>DateTime</h3>\n<p>{{ DateTime.fromMillis($json.trigger.error.timestamp) }}</p>\n<h3>Mode</h3>\n<p>{{ $json.trigger.mode }}</p>\n<h3>Message</h3>\n<p>{{ $json.trigger.error.message }}</p>\n<h3>Name</h3>\n<p>{{ $json.trigger.error.name }}</p>\n<h3>Description</h3>\n<p>{{ $json.trigger.error.description }}</p>\n<h3>Context</h3>\n<pre>{{ JSON.stringify($json.trigger.error.context, null, 2) }}</pre>\n\n<h3>Cause</h3>\n<p>Message: {{ $json.trigger.error.cause.message }}</p>\n<p>Name: {{ $json.trigger.error.cause.name }}</p>\n<p>Code:{{ $json.trigger.error.cause.code }} </p>\n<p>Status: {{ $json.trigger.error.cause.status }}</p>\n<h3>Stack trace</h3>\n<pre>\n{{ $json.trigger.error.cause.stack }}\n</pre>"
      },
      "id": "c0dc9576-73f4-44f6-b82b-c056e40ec693",
      "name": "HTML For Trigger Error",
      "type": "n8n-nodes-base.html",
      "position": [
        2192,
        1024
      ],
      "typeVersion": 1.2,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "sendTo": "={{ $('Settings').first().json['Email Receiver'] }}",
        "subject": "=[N8N Alert] Issue Detected In Workflow ({{ $('Settings').first().json.workflow.name }}) - {{ Boolean($('Settings').first().json.execution) ? \"Execution Error\" : \"Trigger Failure\" }}: {{ $('Settings').first().json.execution.error.message || $('Settings').first().json.trigger.error.message }}",
        "message": "={{ $json.html }}\n",
        "options": {
          "appendAttribution": false,
          "senderName": "={{ $('Settings').first().json['Email Sender Name'] }}"
        }
      },
      "id": "b497eb7b-a9b3-41f6-a71b-d614d20f2402",
      "name": "Gmail Send Notification",
      "type": "n8n-nodes-base.gmail",
      "position": [
        2416,
        912
      ],
      "webhookId": "d9c9328c-5be7-4ebe-a20a-c025e52cdf46",
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "content": "## **Advanced n8n Error Handling: Automated Email Alerts & Global Error Workflow Configuration**\n\nIn any automated environment, n8n workflows, while powerful, can sometimes encounter unexpected issues or fail during execution. Without a dedicated error handling strategy, these failures might go unnoticed, leading to incomplete processes, data inconsistencies, or critical operational disruptions. Manually monitoring every workflow execution or sifting through logs for error details is inefficient and can significantly delay crucial fixes. This is where a centralized, automated error management system becomes essential to maintain reliability and quickly address any problems.\n\nThe \"**Advanced n8n Error Handling: Automated Email Alerts & Global Error Workflow Configuration**\" template provides a robust solution to proactively manage and respond to errors within your n8n instance. \n\nFor more powerful n8n templates, visit our website or contact us at [**AI Automation Pro**](https://aiautomationpro.org/). We help your business build custom AI workflow automation and apps.\n\n## Highlight features\n\n* **Automated Email Notifications:** Sends detailed HTML emails via Gmail for both execution and trigger failures, ensuring you're promptly informed.  \n* **Centralized Error Management:** Acts as a single, dedicated workflow to catch and process errors from multiple other n8n workflows.  \n* **Proactive Global Error Handler Configuration:** A scheduled task automatically scans and updates other active n8n workflows to use this workflow as their default error handler, ensuring consistent error management.  \n* **Comprehensive Error Reporting:** Notification emails are rich with information, including error messages, stack traces, the last executed node, direct links to failed executions, and detailed trigger failure context.  \n* **Dynamic Email Content:** The subject line and body of the notification email are dynamically adjusted based on whether the failure was an execution error or a trigger failure.  \n* **Highly Customizable:** Offers flexibility to modify email content (HTML), change the notification channel (e.g., Slack, other email providers), and adjust the logic for updating other workflows' error handlers.  \n* **Scheduled Operation:** The global configuration part runs on a user-definable schedule (e.g., daily, hourly) for proactive and automated error handling setup across your n8n instance.\n\n## Who is this for?\n\nThis workflow is designed for n8n users and administrators who want to:\n\n* Establish a resilient and centralized error handling mechanism across their n8n instance.  \n* Receive immediate and detailed email notifications for any workflow failures.  \n* Automate the process of assigning a default error handling workflow to all their active n8n workflows.  \n* Save time on manually configuring error handlers for each individual workflow and ensure comprehensive error coverage.\n\n## What problem is this workflow solving? / use case\n\nIn an n8n environment with multiple workflows, errors can occur without immediate visibility. This can lead to:\n\n* Unnoticed failures, potentially causing data loss or incomplete automated processes.  \n* Time-consuming diagnosis of issues due to a lack of readily available, detailed error information.  \n* Inefficiency and oversight from manually setting an error workflow for every new or existing workflow.\n\nThis template tackles these issues by providing a proactive error management system. It not only alerts you to failures with comprehensive details but also ensures that your other workflows are automatically configured to use this centralized handler.\n\n## What this workflow does\n\nThis workflow operates in two distinct yet complementary parts:\n\n**1\\. Scheduled Global Error Handler Configuration:**\n\n* **Trigger:** Initiates based on a configurable schedule (e.g., daily, hourly).  \n* **Identify Self:** Retrieves its own workflow ID to use as the designated error handler.  \n* **Scan Workflows:** Fetches a list of all other workflows within your n8n instance.  \n* **Conditional Update Logic:** For each active workflow found, it checks if:  \n  * An error workflow (`errorWorkflow` setting) is not currently set, OR  \n  * The currently set `errorWorkflow` is different from this central error handling workflow.  \n  * The workflow is active.  \n* **Apply Default Handler:** If the above conditions are met, it automatically updates the target workflow's settings. This sets the current workflow as its default error handler, ensuring that any future errors in those workflows are routed here. The `callerPolicy` setting is also removed during this update.\n\n**2\\. Error Notification via Email:**\n\n* **Trigger:** Activates whenever an error occurs in any n8n workflow that has this workflow designated as its `errorWorkflow`.  \n* **Gather Error Context:** Collects vital information about the failure, such as:  \n  * The base URL of your n8n instance.  \n  * Specific details of the workflow that failed (name, ID).  \n  * The nature of the error: whether it's an \"execution error\" (occurring mid-workflow) or a \"trigger failure\" (occurring at the start).  \n* **Format Detailed Error Message:** Constructs a comprehensive HTML email tailored to the error type:  \n  * **For Execution Errors:** The email includes a direct link to the failed execution's page, the timestamp of the error, the name of the last node that successfully executed, the error message, and the full error stack trace.  \n  * **For Trigger Failures:** The email includes the timestamp, operational mode, error message, error name and description, relevant context data, details about the cause (message, name, code, status), and the stack trace.  \n* **Send Email Notification:** Dispatches the formatted HTML email using Gmail to a predefined recipient. The email subject line dynamically indicates the name of the failing workflow and the type of error, providing a quick overview.\n\n## Setup\n\n1. **Import Workflow:** Import the JSON file into your n8n instance.  \n2. **Configure Credentials:**  \n   * **n8n API Access:**  \n     * Locate the nodes: \"N8n Get Error Handler\", \"N8n Get All Workflows\", and \"N8n Update Workflow\".  \n     * For each, select or create new n8n API credentials. These credentials must have permissions to read all workflows (`workflows.read`) and update workflows (`workflows.update`).  \n   * **Gmail Access:**  \n     * Locate the \"Gmail Send Notification\" node.  \n     * Select or create new Gmail OAuth2 credentials to authorize n8n to send emails on your behalf.  \n3. **Set Email Recipient and Sender Details:**  \n   * Navigate to the \"Settings\" node, which is connected directly after the \"Error Trigger\" node.  \n   * Modify the value for the `Email Receiver` variable to the email address where error notifications should be sent.  \n   * Optionally, update the `Email Sender Name` variable.  \n4. **Configure Schedule (Optional):**  \n   * Select the \"Schedule Trigger\" node.  \n   * Adjust the \"Trigger Interval\" (e.g., Every Day, Every Hour) according to how frequently you want the workflow to scan and update the error handler settings for other workflows in your n8n instance.  \n5. **Activate Workflow:** Ensure this workflow is toggled to \"Active\". Once active, its scheduled component will begin operating, and it will be ready to process and notify on errors from other linked workflows.  \n6. **Manual Configuration (Optional):** While this workflow automates the assignment, you can also manually set this workflow as the `errorWorkflow` in the settings of any critical existing workflows for immediate protection.\n\n## How to customize this workflow to your needs\n\n* **Email Content & Formatting:** Modify the HTML content within the \"HTML For Execution Error\" and \"HTML For Trigger Error\" nodes to alter the appearance, structure, or information included in the notification emails.  \n* **Alternative Notification Channels:** Replace the \"Gmail Send Notification\" node with a different email service node (e.g., Microsoft Outlook, SendGrid) or integrate other notification platforms like Slack, Microsoft Teams, or Discord. Remember to adjust the input data mappings for the new node.  \n* **Refine Global Update Logic:** Adjust the conditions within the \"If No Default Error Handler Set\" node if you need more granular control over which workflows are automatically updated (e.g., filter by workflow tags, names, or explicitly exclude certain workflows).  \n* **Enrich Error Data:** Insert additional nodes after the \"Error Trigger\" but before the \"Settings\" node if you need to fetch more context about the error or the workflow that failed (e.g., look up related information from a database or API).  \n* **Advanced Notification Routing:** Implement more complex logic prior to sending notifications. For example, you could use a Switch node to route error alerts to different email addresses or channels based on the name of the failing workflow or the severity of the error.  \n* **Handling of `callerPolicy`:** The \"Set Data\" node is configured to remove the `callerPolicy` setting from workflows it updates. If your workflows rely on this setting, you may need to modify or remove this part of the \"Set Data\" node's code.  \n* **Adjust Scheduled Task:** Change the frequency or timing of the \"Schedule Trigger\" to better suit your operational needs for the global error handler update.\n",
        "height": 3080,
        "width": 740
      },
      "id": "34b07331-bf9e-453e-89de-1c51fa094642",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        368,
        240
      ],
      "typeVersion": 1
    }
  ],
  "connections": {
    "Set Data": {
      "main": [
        [
          {
            "node": "N8n Update Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Settings": {
      "main": [
        [
          {
            "node": "If Execution Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Settings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "N8n Get Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Execution Error": {
      "main": [
        [
          {
            "node": "HTML For Execution Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTML For Trigger Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N8n Get All Workflows": {
      "main": [
        [
          {
            "node": "If No Default Error Handler Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "N8n Get Error Handler": {
      "main": [
        [
          {
            "node": "N8n Get All Workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML For Trigger Error": {
      "main": [
        [
          {
            "node": "Gmail Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML For Execution Error": {
      "main": [
        [
          {
            "node": "Gmail Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If No Default Error Handler Set": {
      "main": [
        [
          {
            "node": "Set Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateId": "4519"
  },
  "pinData": {},
  "versionId": "3250e469-843c-4f6a-8996-87d3451849fc",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-10-26T06:14:34.147Z",
      "updatedAt": "2025-10-26T06:14:34.147Z",
      "role": "workflow:owner",
      "workflowId": "Kmj8SVVcrkzq4g5F",
      "projectId": "LuK1n39yspgZn4ID",
      "project": {
        "createdAt": "2025-06-03T10:24:12.778Z",
        "updatedAt": "2025-06-03T11:30:21.622Z",
        "id": "LuK1n39yspgZn4ID",
        "name": "Fuzail Sohail <fuzailsohail40@gmail.com>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-06-03T10:24:12.781Z",
            "updatedAt": "2025-06-03T10:24:12.781Z",
            "userId": "9ba5b413-59b6-4d30-ad4b-75763cd3a374",
            "projectId": "LuK1n39yspgZn4ID",
            "user": {
              "createdAt": "2025-06-03T10:24:12.776Z",
              "updatedAt": "2025-10-26T05:15:48.000Z",
              "id": "9ba5b413-59b6-4d30-ad4b-75763cd3a374",
              "email": "fuzailsohail40@gmail.com",
              "firstName": "Fuzail",
              "lastName": "Sohail",
              "personalizationAnswers": null,
              "settings": {
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "CcHBrELrSsWhXNYT",
                "userActivated": true,
                "userActivatedAt": 1750330808510,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1753277941726
                }
              },
              "disabled": false,
              "mfaEnabled": true,
              "lastActiveAt": "2025-10-26",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": [
    {
      "createdAt": "2025-08-14T20:27:52.072Z",
      "updatedAt": "2025-08-14T20:27:52.072Z",
      "id": "CbQQ2nfApBR0i0Ru",
      "name": "TopRatedCoachAI"
    }
  ]
}