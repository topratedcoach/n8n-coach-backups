{
  "createdAt": "2025-08-20T07:02:36.850Z",
  "updatedAt": "2025-08-20T15:32:16.000Z",
  "id": "P9k4XwIGZkAJDbw4",
  "name": "Clean Up Duplicate DB Mess And ReAnalyze existing Calls",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        928,
        32
      ],
      "id": "920cd9bd-1658-405b-973c-319a3bcf45b7",
      "name": "CHATGPT",
      "credentials": {
        "openAiApi": {
          "id": "GwlwzOiOthioGCVV",
          "name": "OpenAI TOP RATED COACH API KEY"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rawOutput = $('Call Analysis AI').first().json.output;\nconst parsed = JSON.parse(rawOutput);\n\nreturn [{ json: parsed }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1216,
        -192
      ],
      "id": "6498231a-4b44-4469-a7ee-ce5be2d56e47",
      "name": "Parse AI Analysis Output into JSON"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert customer experience auditor. You are analyzing a phone call between a customer (our AI agent) and a business. I will provide you with the transcript of the entire call. Based on this transcript, your job is to audit the customer experience quality by extracting and evaluating key metrics.\n\nConduct a highly detailed and rigorous analysis. Do not overlook any details, no matter how minor, and analyze both common and easily neglected aspects of the interaction.\n\nYour output must:\n- Be in valid JSON format.\n- Start with { and end with } (no Markdown, no quotes around the whole output, no extra text).\n- Contain all the fields below exactly as named.\n- Keep the structure exactly as specified.\n- If a field cannot be filled due to lack of data, use an empty string \"\" or an empty array [].\n- Be objective, concise, and actionable.\n\nJSON structure to output:\n{\n  \"overall_summary\": \"Brief summary of the interaction and the business’s overall behavior.\",\n  \"tone_analysis\": {\n    \"representative_tone\": \"Describe the tone of the business representative (e.g., friendly, rushed, indifferent, enthusiastic).\",\n    \"tone_consistency\": \"Was the tone consistent throughout the call?\"\n  },\n  \"response_quality\": {\n    \"clarity\": \"Were the responses clear and easy to understand?\",\n    \"accuracy\": \"Did the answers match the questions asked?\",\n    \"helpfulness\": \"Was the representative helpful or dismissive?\"\n  },\n  \"engagement_level\": \"Did the representative show interest in helping the customer?\",\n  \"professionalism\": \"Was the rep polite, respectful, and professional?\",\n  \"script_adherence\": \"If applicable, did the representative follow any visible script or structure?\",\n  \"call_opening\": \"Evaluation of how the call was opened by the representative (e.g., professional greeting, clear identification).\",\n  \"wait_times\": {\n    \"initial_wait_time\": \"How long before the business answered the call?\",\n    \"on_hold_time\": \"Was there any hold time during the call?\"\n  },\n  \"question_handling\": [\n    {\n      \"question\": \"Original question asked by the agent\",\n      \"answer\": \"Response from the business\",\n      \"evaluation\": \"Was the question fully answered, partially answered, or avoided?\"\n    }\n  ],\n  \"issues_detected\": [\n    \"List of any problems or red flags detected during the call (e.g., rude behavior, lack of product knowledge)\"\n  ],\n  \"positive_highlights\": [\n    \"List of any good practices or positive moments in the interaction\"\n  ],\n  \"engagement_and_relationship_building_score\": 0,\n  \"product_service_knowledge_and_education_score\": 0,\n  \"answering_questions_score\": 0,\n  \"ability_to_upsell_and_cross_sell_score\": 0,\n  \"closing_for_appointment_and_call_to_action_score\": 0,\n  \"overall_success_rate_out_of_100\": 0,\n  \"appointment_booked\": \"Did the call outcome result in Ana booking the visit? (true/false)\",\n  \"improvement_ideas\": [\n    \"Improvement idea 1\",\n    \"Improvement idea 2\",\n    \"Improvement idea 3\"\n  ],\n  \"agent_name\": \"Name of the business representative (NOT OUR AI AGENT \"ANA\") if provided in the transcript, otherwise empty\"\n}\n\nScoring guidelines for numeric fields:\n- The five *_score fields (each out of 20) are based on:\n    - Engagement and Relationship Building\n    - Product/Service Knowledge and Education\n    - Answering Questions\n    - Ability to Upsell and Cross-Sell\n    - Closing for Appointment and Call to Action\n- Sum these five scores to get `overall_success_rate_out_of_100`.\n- Improvement ideas should be 3 concise, actionable bullet points based on the lowest scoring areas.\n\nOnly use the information from the transcript. Do not assume or invent details.\n\nCall Data And Transcript:\n{{ JSON.stringify($('Convert Transcript Object into AI Friendly').item.json) }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        864,
        -192
      ],
      "id": "33c8daad-7c3b-4a1f-ae84-eb3d284db2fb",
      "name": "Call Analysis AI"
    },
    {
      "parameters": {
        "jsCode": "const data = { ...$('Create JSON with metadata').item.json };\ndelete data.performance;\n\nreturn [\n  {\n    json: \n      (data)\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        -192
      ],
      "id": "a8341fe8-de77-4b23-af94-7eef2e4f30d3",
      "name": "Convert Transcript Object into AI Friendly"
    },
    {
      "parameters": {
        "url": "={{$vars.SupabaseDBUrl}}/calls",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "direction",
              "value": "=eq.outbound"
            },
            {
              "name": "order",
              "value": "created_at.desc"
            },
            {
              "name": "call_duration",
              "value": "is.null"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.Supabase_Service_Role }}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -464,
        -272
      ],
      "id": "71876108-1609-4993-98bd-fe3654a8b3d3",
      "name": "Get Calls In DB"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -688,
        -272
      ],
      "id": "c2632910-fbb8-40d2-960c-d37f62573514",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "url": "={{$vars.ElevenLabsBaseURL}}conversations/{{ $('Loop Over Items').item.json.conv_id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Xi-Api-Key",
              "value": "={{$vars.ElevenLabsAPIkey}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -32,
        -192
      ],
      "id": "fb1004b7-ac03-4b1f-8a16-3cb0f219127d",
      "name": "Fetch Conversation through ConvID",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "=https://api.twilio.com/2010-04-01/Accounts/{{$vars.TWILIO_ACCOUNT_SID}}/Calls/{{ $('Loop Over Items').item.json.call_sid }}.json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -256,
        -192
      ],
      "id": "39f12647-1bad-4ce7-8ce5-b738bb23399f",
      "name": "Twilio Call Status",
      "credentials": {
        "httpBasicAuth": {
          "id": "PdHyrjcfDMihAzEn",
          "name": "TwilioAuth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const call = $('Twilio Call Status').first().json;\n\n// Parse timestamps\nconst dateCreated = new Date(call.date_created);\nconst queueTimeSec = parseInt(call.queue_time || \"0\", 10);\nconst startTime = new Date(call.start_time);\n\n// Calculate actual ringing start time\nconst ringingStartTime = new Date(dateCreated.getTime() + queueTimeSec * 1000);\n\n\nconst conv = $('Fetch Conversation through ConvID').first().json;\nconst { metadata, analysis, transcript, conversation_initiation_client_data } = conv;\nconst { phone_call, charging, termination_reason, call_duration_secs } = metadata;\n\n// Performance metrics calculation\nlet ragCount = 0, totalTTFB = 0, totalTTF = 0, totalRAGLatency = 0, interruptions = 0;\nconst ragDistances = [];\n\ntranscript.forEach(turn => {\n  // Process latency metrics\n  const metrics = turn.conversation_turn_metrics?.metrics;\n  if (metrics) {\n    totalTTFB += metrics.convai_llm_service_ttfb?.elapsed_time || 0;\n    totalTTF += metrics.convai_llm_service_ttf_sentence?.elapsed_time || 0;\n  }\n  \n  // Process RAG metrics\n  const ragInfo = turn.rag_retrieval_info;\n  if (ragInfo) {\n    ragCount++;\n    totalRAGLatency += ragInfo.rag_latency_secs;\n    ragInfo.chunks.forEach(chunk => ragDistances.push(chunk.vector_distance));\n  }\n  \n  // Track interruptions\n  if (turn.interrupted) interruptions++;\n});\n\n// Calculate averages safely\nconst calcAverage = (sum, count) => count > 0 ? parseFloat((sum / count).toFixed(3)) : 0;\nconst ragDistanceStats = ragDistances.length > 0 ? {\n  min: parseFloat(Math.min(...ragDistances).toFixed(3)),\n  max: parseFloat(Math.max(...ragDistances).toFixed(3))\n} : { min: 0, max: 0 };\n\n// Extract LLM data safely\nconst llmTokens = charging?.llm_usage?.irreversible_generation?.model_usage?.[\"gpt-4.1\"] || {};\nconst llmCost = charging?.llm_price || 0;\n\nreturn [{\n  json: {\n    // Metadata\n    conversation_id: conversation_initiation_client_data.dynamic_variables.system__conversation_id,\n    call_duration_sec: call_duration_secs,\n    eventTime: new Date(metadata.start_time_unix_secs * 1000).toISOString(),\n    callInitiateTime: ringingStartTime.toISOString(),\n    callAcceptedTime: startTime.toISOString(),\n    direction: phone_call.direction,\n    from_number: phone_call.agent_number,\n    to_number: phone_call.external_number,\n    \n    // Performance metrics\n    performance: {\n      avg_ttfb_sec: calcAverage(totalTTFB, ragCount),\n      avg_ttf_sec: calcAverage(totalTTF, ragCount),\n      rag_retrievals: ragCount,\n      rag_avg_latency_sec: calcAverage(totalRAGLatency, ragCount),\n      rag_min_distance: ragDistanceStats.min,\n      rag_max_distance: ragDistanceStats.max,\n      llm_cost: parseFloat(llmCost.toFixed(6)),\n      llm_input_tokens: llmTokens.input?.tokens || 0,\n      llm_output_tokens: llmTokens.output_total?.tokens || 0\n    },\n    \n    // Quality indicators\n    quality: {\n      termination_reason,\n      call_successful: analysis.call_successful,\n      interruptions\n    },\n    \n    // Content analysis\n    summary: analysis.transcript_summary,\n    gym_name: conversation_initiation_client_data.dynamic_variables.gym_name,\n\n    \n    // Transcript (optimized format)\n    transcript: transcript.map(({ role, message, time_in_call_secs }) => ({\n      role,\n      message,\n      timestamp_sec: time_in_call_secs\n    }))\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        -192
      ],
      "id": "8d0a38a1-3065-48e5-bd51-a102e4aeef52",
      "name": "Create JSON with metadata"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{$vars.SupabaseDBUrl}}/generated_call_reports",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "=eq.{{ $('Loop Over Items').item.json.report_id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.Supabase_Service_Role }}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            },
            {
              "name": "Prefer",
              "value": "=return=representation,resolution=merge-duplicates"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"overall_summary\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.overall_summary || '' }}\",\n  \"engagement_level\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.engagement_level || '' }}\",\n  \"professionalism\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.professionalism || '' }}\",\n  \"script_adherence\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.script_adherence || '' }}\",\n  \"issues_detected\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.issues_detected || '' }}\",\n  \"positive_highlight\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.positive_highlights || '' }}\",\n  \"engagement_and_relationship_building_score\": {{ $('Parse AI Analysis Output into JSON').item?.json?.engagement_and_relationship_building_score || 0 }},\n  \"product_service_knowledge_and_education_score\": {{ $('Parse AI Analysis Output into JSON').item?.json?.product_service_knowledge_and_education_score || 0 }},\n  \"answering_questions_score\": {{ $('Parse AI Analysis Output into JSON').item?.json?.answering_questions_score || 0 }},\n  \"ability_to_upsell_and_cross_sell_score\": {{ $('Parse AI Analysis Output into JSON').item?.json?.ability_to_upsell_and_cross_sell_score || 0 }},\n  \"closing_for_appointment_and_call_to_action_score\": {{ $('Parse AI Analysis Output into JSON').item?.json?.closing_for_appointment_and_call_to_action_score || 0 }},\n  \"overall_success_rate_out_of_100\": {{ $('Parse AI Analysis Output into JSON').item?.json?.overall_success_rate_out_of_100 || 0 }},\n  \"improvement_ideas\": {{ JSON.stringify($('Parse AI Analysis Output into JSON').item?.json?.improvement_ideas || []) }},\n  \"agent_name\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.agent_name || '' }}\",\n   \"appointment_booked\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.appointment_booked || false }}\",\n  \"initial_wait_time\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.wait_times?.initial_wait_time || '' }}\",\n  \"on_hold_time\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.wait_times?.on_hold_time || '' }}\",\n  \"representative_tone\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.tone_analysis?.representative_tone || '' }}\",\n  \"tone_consistency\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.tone_analysis?.tone_consistency || '' }}\",\n  \"clarity\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.response_quality?.clarity || '' }}\",\n  \"accuracy\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.response_quality?.accuracy || '' }}\",\n  \"helpfulness\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.response_quality?.helpfulness || '' }}\",\n  \"call_opening\": \"{{ $('Parse AI Analysis Output into JSON').item?.json?.call_opening || '' }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1440,
        -64
      ],
      "id": "86fa1813-9283-467d-8493-7ba8927060a8",
      "name": "Update Generated Reports Entry In DB"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{$vars.SupabaseDBUrl}}/calls",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "=eq.{{ $('Loop Over Items').item.json.id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.Supabase_Service_Role }}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            },
            {
              "name": "Prefer",
              "value": "=return=representation,resolution=merge-duplicates"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"call_duration\": {{ $('Create JSON with metadata').item.json.call_duration_sec }},\n  \"interruptions\": {{ $('Create JSON with metadata').item.json.quality.interruptions }},\n  \"termination_reason\": \"{{ $('Create JSON with metadata').item.json.quality.termination_reason }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        416,
        -192
      ],
      "id": "e51ac0d0-05d1-4824-8832-d3121e000a8c",
      "name": "Update Call Entry In DB"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -480,
        -64
      ],
      "id": "1c746120-99a9-40dd-ada1-5261d2043a83",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -112,
        -608
      ],
      "id": "7574b223-0b34-4211-84e9-dbe21c9f3179",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "url": "={{$vars.SupabaseDBUrl}}/task_groups",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "=eq.{{ $('Loop Over Items1').item.json.task_group_id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.Supabase_Service_Role }}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        112,
        -672
      ],
      "id": "ed7e0dba-21eb-4b97-a238-bd52e73ed5a6",
      "name": "Get TaskGroup",
      "executeOnce": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a1f78b4-ac6d-407e-82bd-ce5d2e42fe6c",
              "leftValue": "={{ $('Get TaskGroup').item.json.task_name }}",
              "rightValue": "={{ $vars.InboundAnalysisDbKEY }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "99653673-0391-46f3-8f79-d0af93e3ab66",
              "leftValue": "={{ $('Loop Over Items1').item.json.direction }}",
              "rightValue": "outbound",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        336,
        -608
      ],
      "id": "3581bf4f-26f8-44ea-95dc-e913ef8db9de",
      "name": "If its InboundTask and In Calls direction is Outbound"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{$vars.SupabaseDBUrl}}/task_groups",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "=eq.{{$('Get TaskGroup').item.json.id}}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{$vars.Supabase_API_Key}}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{$vars.Supabase_Service_Role}}"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "status",
              "value": "failed"
            },
            {
              "name": "error_message",
              "value": "Business did not follow up within 72 hours"
            },
            {
              "name": "n8n_workflow_id",
              "value": "={{ null }}"
            },
            {
              "name": "n8n_execution_id",
              "value": "={{ null }}"
            },
            {
              "name": "started_at",
              "value": "={{ null }}"
            },
            {
              "name": "completed_at",
              "value": "={{ null }}"
            },
            {
              "name": "result_data",
              "value": "{}"
            }
          ]
        },
        "options": {}
      },
      "id": "25b3f723-7b0f-4c36-adfc-dd07036c160a",
      "name": "Mark as Failed",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1456,
        -608
      ]
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "={{$vars.SupabaseDBUrl}}/generated_call_reports",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "=eq.{{ $('Loop Over Items1').item.json.report_id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.Supabase_Service_Role }}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1232,
        -608
      ],
      "id": "543ac923-e7e0-40ee-96f9-27aeb33263c5",
      "name": "Delete Generated Reports",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "={{$vars.SupabaseDBUrl}}/call_transcripts",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "call_id",
              "value": "=eq.{{ $('Loop Over Items1').item.json.id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.Supabase_Service_Role }}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        560,
        -608
      ],
      "id": "0d724f0f-bb3e-4a4c-8de0-13aff645151d",
      "name": "Delete Transcript"
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "={{$vars.SupabaseDBUrl}}/call_report_evaluations",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "report_id",
              "value": "=eq.{{ $('Loop Over Items1').item.json.report_id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.Supabase_Service_Role }}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        784,
        -608
      ],
      "id": "ff6abd01-4b0a-4a95-ae2d-c39d11653f0d",
      "name": "Delete Call Report Evaluations"
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "={{$vars.SupabaseDBUrl}}/calls",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "=eq.{{ $('Loop Over Items1').item.json.id }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $vars.Supabase_Service_Role }}"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $vars.Supabase_Service_Role }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1008,
        -608
      ],
      "id": "6a5886af-411e-403a-9f69-445401b2cb68",
      "name": "Delete Calls"
    }
  ],
  "connections": {
    "CHATGPT": {
      "ai_languageModel": [
        [
          {
            "node": "Call Analysis AI",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI Analysis Output into JSON": {
      "main": [
        [
          {
            "node": "Update Generated Reports Entry In DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Analysis AI": {
      "main": [
        [
          {
            "node": "Parse AI Analysis Output into JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert Transcript Object into AI Friendly": {
      "main": [
        [
          {
            "node": "Call Analysis AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Calls In DB": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get Calls In DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio Call Status": {
      "main": [
        [
          {
            "node": "Fetch Conversation through ConvID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Conversation through ConvID": {
      "main": [
        [
          {
            "node": "Create JSON with metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create JSON with metadata": {
      "main": [
        [
          {
            "node": "Update Call Entry In DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Call Entry In DB": {
      "main": [
        [
          {
            "node": "Convert Transcript Object into AI Friendly",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Twilio Call Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Generated Reports Entry In DB": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Get TaskGroup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get TaskGroup": {
      "main": [
        [
          {
            "node": "If its InboundTask and In Calls direction is Outbound",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If its InboundTask and In Calls direction is Outbound": {
      "main": [
        [
          {
            "node": "Delete Transcript",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Generated Reports": {
      "main": [
        [
          {
            "node": "Mark as Failed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Transcript": {
      "main": [
        [
          {
            "node": "Delete Call Report Evaluations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Call Report Evaluations": {
      "main": [
        [
          {
            "node": "Delete Calls",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Calls": {
      "main": [
        [
          {
            "node": "Delete Generated Reports",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark as Failed": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "0e6ae915-9fe5-4cb9-b9b3-63a090b533dc",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-20T07:02:36.855Z",
      "updatedAt": "2025-08-20T07:02:36.855Z",
      "role": "workflow:owner",
      "workflowId": "P9k4XwIGZkAJDbw4",
      "projectId": "LuK1n39yspgZn4ID",
      "project": {
        "createdAt": "2025-06-03T10:24:12.778Z",
        "updatedAt": "2025-06-03T11:30:21.622Z",
        "id": "LuK1n39yspgZn4ID",
        "name": "Fuzail Sohail <fuzailsohail40@gmail.com>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-06-03T10:24:12.781Z",
            "updatedAt": "2025-06-03T10:24:12.781Z",
            "userId": "9ba5b413-59b6-4d30-ad4b-75763cd3a374",
            "projectId": "LuK1n39yspgZn4ID",
            "user": {
              "createdAt": "2025-06-03T10:24:12.776Z",
              "updatedAt": "2025-10-19T07:00:00.000Z",
              "id": "9ba5b413-59b6-4d30-ad4b-75763cd3a374",
              "email": "fuzailsohail40@gmail.com",
              "firstName": "Fuzail",
              "lastName": "Sohail",
              "personalizationAnswers": null,
              "settings": {
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "CcHBrELrSsWhXNYT",
                "userActivated": true,
                "userActivatedAt": 1750330808510,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1753277941726
                }
              },
              "disabled": false,
              "mfaEnabled": true,
              "lastActiveAt": "2025-10-19",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": [
    {
      "createdAt": "2025-08-14T20:27:52.072Z",
      "updatedAt": "2025-08-14T20:27:52.072Z",
      "id": "CbQQ2nfApBR0i0Ru",
      "name": "TopRatedCoachAI"
    }
  ]
}